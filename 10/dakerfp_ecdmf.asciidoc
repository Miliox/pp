Programação Paralela - Trabalho 10
==================================

Daker Fernandes <dakerfp@gmail.com>

Emiliano Firmino <emiliano.firmino@gmail.com>

Questão:
--------

[start=93]
93. Reimplement the SimpleReadWriteLock class using Java *syncronized*,
+wait()+, +notify()+, and +notifyAll()+ constructs in place of explicit locks
and conditions.

Hint: you must figure out how methods of the inner read-write lock classes can
lock the outer SimpleReadWriteLock object

[start=96]
96. In the __shared bathroom problem__, there are two classes of threads,
called __male__ and __female__. There is a single __bathroom__ resource that
must be used in the following way:

[start=1]
1. Mutual exclusion: persons of opposite sex may not occupy the bathroom
simultaneously,

2. Starvation-freedom: everyone who needs to use the bathroom eventually enters.

The protocol is implemented via the following four procedures: +enterMale()+
delays the caller until it is ok for a male to enter the bathroom, +leaveMale()+ is
called when a male leaves the bathroom while +enterFemale()+ and +leaveFemale()+ do
the same for females. For example,

-------------------
enterMale();
teeth.brush(toothpaste);
leaveMale();
-------------------

[start=1]
1. Implement this class using locks and conditional variables.

2. Implement this class using *syncronized*, +wait()+, +notify()+, and +notifyAll()+.

For each implementation, explain why its satisfies mutual exclusion and Starvation
freedom.

[start=98]
98. Consider an application with distinct sets of __active__ and __passive__
threads, where we want to block the passive threads until all acive threads
give permission for the passive threads to proceed.

A +CountDownLatch+ encapsulates a counter, initialized to be n, the number of
active threads. When an active methods is ready for the passive threads to run,
it calls +countDown()+, which decrement the counter. Each passive thread calls
+await()+, which blocks the thread until the counter reaches zero. (See Fig. 8.16)

Provide a +CountDownLatch+ implementation. Do not worry about reusing the
+CountDownLatch+ object.
